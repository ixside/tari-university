#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
The MuSig Schnorr Signature Scheme
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction 
\end_layout

\begin_layout Standard
This report investigates MuSig, which is provably secure in the 
\emph on
plain public-key model
\emph default
.
 However, the case of interactive signature aggregation where each signer
 signs their own message must still be proven by a complete security analysis.
 
\end_layout

\begin_layout Standard
Multi-signatures are a form of technology used to add additional security
 for cryptocurrency transactions.
 A multi-signature protocol which allows a group of signers to produce a
 short, joint signature on a common message.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Maxwell2018"
literal "false"

\end_inset


\end_layout

\begin_layout Section
Schnorr Signatures for Bitcoin 
\end_layout

\begin_layout Standard
Schnorr signatures produce a smaller on-chain size, support faster validation
 and have better privacy.
 They natively allow for combining multiple signatures into one through
 aggregation.
 They permit more complex spending policies, including 
\emph on
k
\emph default
-of-
\emph on
n
\emph default
 and more to be represented as as single signature for a single key.
\end_layout

\begin_layout Standard
Signature aggregation also has its challenges.
 This included the rogue-key attack, where a participant steals funds using
 a specifically constructed key.
 This is easily solved for simple multi-signatures, however, through an
 enrollment procedure, where the keys sign themselves, supporting it across
 multiple inputs of a transaction requires plain public-key security, meaning
 there is no setup.
 
\end_layout

\begin_layout Standard
An additional attack, termed the Russel attacks, after Russel O'Connor,
 who was discovered for multi-party schemes where a party could claim ownership
 of someone else's key and so spend their other outputs.
 
\end_layout

\begin_layout Standard
Peter Wuille discussed the issues and their solutions, which refines the
 Bellare-Neven (BN) scheme.
 He also discussed the performance improvements that were implemented for
 the scaler multiplication fo the BN scheme and how they enable batch validation
 on the blockchain.
 A pair of BIPs are in process to make these advances a reality for Bitcoin.
\begin_inset CommandInset citation
LatexCommand cite
key "Blocks2018"
literal "false"

\end_inset


\end_layout

\begin_layout Section
Key Aggregation for Schnorr Signatures 
\end_layout

\begin_layout Standard
MuSig is a simple multi-signature scheme that is novel in combining:
\end_layout

\begin_layout Enumerate
Support for key aggregation; 
\end_layout

\begin_layout Enumerate
Security in the plain public-key model.
 
\end_layout

\begin_layout Standard
There are two versions of MuSig, that are provably secure, which differ
 based on the number of communication rounds:
\end_layout

\begin_layout Itemize
Three-round MuSig only relies on the Discrete Logarithm (DL) assumption,
 on which ECDSA (Elliptic Curve Digital Signature Algorithm) also relies
 
\end_layout

\begin_layout Itemize
Two-round MuSig instead relies on the slightly stronger One-More Discrete
 Logarithm (OMDL) assumption
\end_layout

\begin_layout Standard
A multi-signature scheme is a combination of a signing and verification
 algorithm, where multiple signers (each with their own private/public key)
 jointly sign a single message, resulting in a single signature.
 This can then be verified by anyone knowing the message and the public
 keys of the signers.
 
\end_layout

\begin_layout Standard
Note: in the context of Bitcoin, the term 'multisig' refers to a 
\emph on
k
\emph default
-of-
\emph on
n
\emph default
 policy, where 
\emph on
k
\emph default
 can be different from 
\emph on
n
\emph default
.
 While in the cryptographic literature, the term multi signature really
 only refers to 
\emph on
n
\emph default
-of-
\emph on
n
\emph default
 policies, however, 
\emph on
k
\emph default
-of-
\emph on
n
\emph default
 can be constructed on top of 
\emph on
n
\emph default
-of-
\emph on
n
\emph default
.
\end_layout

\begin_layout Standard
The term 
\emph on
key aggregation
\emph default
 refers to multi-signatures that look like a single-key signature, but with
 respect to an aggregated public key that is a function of only the participants
' public keys.
 Thus, verifiers do not require the knowledge of the original participants'
 public keys- they can just be given the aggregated key.
 In some use cases, this leads to better privacy and performance.
 MuSig is effectively a key aggregation scheme for Schnorr signatures.
 
\end_layout

\begin_layout Standard
There are other multi-signature schemes that already exist that provide
 key aggregation for Schnorr signatures, however they come with some limitations
, such as needing to verify that participants actually have the private
 key corresponding to the pubic keys that they claim to have.
 
\emph on
Security in the plain public-key model 
\emph default
means that no limitations exist.
 All that is needed from the participants is their public keys.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Wuille2018"
literal "false"

\end_inset

 
\end_layout

\begin_layout Subsection
Applications of mulit-signatures in Bitcoin 
\end_layout

\begin_layout Standard
The most obvious use case for mulit-signatures with regards to Bitcoin is
 as a more efficient replacement of 
\emph on
n
\emph default
-of-
\emph on
n
\emph default
 multisig scripts and other policies that permit a number of possible combinatio
ns of keys (including 
\emph on
k
\emph default
-of-
\emph on
n
\emph default
, using key trees, MAST, or traditional threshold schemes).
 For these, a native multi-signature scheme means that what is left is one
 signature per transaction input.
 
\end_layout

\begin_layout Standard
A key aggregation scheme also lets us reduce the number of public keys per
 input to one, as a user can send coins to the aggregate of all involved
 key, rather than including them all in the script.
 This leads to smaller on-chain footprint, faster validation, and better
 privacy.
 As a result, MuSig is a good choice here.
 
\end_layout

\begin_layout Standard
Instead of creating restrictions with one signature per input, one signature
 can be used for the entire transaction.
 Key aggregation cannot be used across multiple inputs, as the public keys
 are committed to by the outputs, and those can be spent independently.
 MuSig can be used here (with key aggregation done by the verifier).
 
\end_layout

\begin_layout Standard
On a technical standing, in order to combine all the transaction inputs'
 signatures, a multi-signature scheme is not necessary, instead an aggregate
 signature scheme can be used.
 The distinction is simply that in an aggregate signature, each signer has
 their own message, instead of one message shared by all.
 
\end_layout

\begin_layout Standard
Aggregate signatures can be categorized as being:
\end_layout

\begin_layout Itemize
Interactive: Interactive aggregate signatures (IAS) require the signers
 to cooperate, while non-interactive schemes all the aggregation to be done
 by anyone
\end_layout

\begin_layout Itemize
Non-interactive: These allow the aggregation to be done by anyone
\end_layout

\begin_layout Standard
No non-interactive aggregation schemes are known that only rely on the DL
 assumption, but interactive ones are trivial to construct: where a multi-signat
ure scheme has every participant sign the concatenation of all messages.
 The paper by Blocksteam, focusing on key aggregation for Schnorr Signatures
 shows that this is not always a desirable construction, and gives an IAS
 variant of BN with better properties instead.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Wuille2018"
literal "false"

\end_inset


\end_layout

\begin_layout Subsubsection
Details 
\end_layout

\begin_layout Standard

\bar under
Notation 
\end_layout

\begin_layout Itemize
\begin_inset Formula $x,x_{1,}x_{2...}$
\end_inset

are private keys with corresponding public keys 
\begin_inset Formula $X,X_{1},X_{2}...$
\end_inset

 
\begin_inset Formula $X_{i}=x_{i}G$
\end_inset

, with 
\begin_inset Formula $G$
\end_inset

 the generator
\end_layout

\begin_layout Itemize
The message being signed is 
\begin_inset Formula $m$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $H()$
\end_inset

 is a cryptographic hash function 
\end_layout

\begin_layout Standard

\bar under
Schnorr Signatures
\bar default
 
\end_layout

\begin_layout Itemize
Signatures are 
\begin_inset Formula $(R,s)=(rG,r+H(X,R,m)x)$
\end_inset

 where 
\begin_inset Formula $r$
\end_inset

is a random nonce chosen by the signer 
\end_layout

\begin_layout Itemize
Verification requires 
\begin_inset Formula $sG=R+H(X,R,m)X$
\end_inset


\end_layout

\begin_layout Standard

\bar under
Naive Schnorr multi-signatures 
\end_layout

\begin_layout Itemize
Call 
\begin_inset Formula $X$
\end_inset

 the sum of the 
\begin_inset Formula $X_{i}$
\end_inset

 points
\end_layout

\begin_layout Itemize
Each signer chooses a random nonce 
\begin_inset Formula $r_{i}$
\end_inset

 and shares 
\begin_inset Formula $R_{i}=r_{i}G$
\end_inset

 with the other signers 
\end_layout

\begin_layout Itemize
Call 
\begin_inset Formula $R$
\end_inset

 the sum of the 
\begin_inset Formula $R_{i}$
\end_inset

 points
\end_layout

\begin_layout Itemize
Each signer computes 
\begin_inset Formula $s_{i}=r_{i}+H(X,R,m)x_{i}$
\end_inset


\end_layout

\begin_layout Itemize
The final signature is 
\begin_inset Formula $(R,s)$
\end_inset

 where 
\begin_inset Formula $s$
\end_inset

 is the sum of the 
\begin_inset Formula $s_{i}$
\end_inset

values 
\end_layout

\begin_layout Itemize
Verification requires 
\begin_inset Formula $sG=R+H(X,R,m)X$
\end_inset

, where 
\begin_inset Formula $X$
\end_inset

 is the sum of the individual public keys
\end_layout

\begin_layout Standard
It is interesting to note that this satisfies the definition of a 
\emph on
key aggregation scheme
\emph default
, as multiple parties can jointly produce a signature that is a valid single-key
 signature for the sum of the keys.

\emph on
 
\end_layout

\begin_layout Standard
The issue arises in that this scheme is not secure.
 Consider the following scenario:
\end_layout

\begin_layout Itemize
Alice and Bob want to produce a multi-signature together.
\end_layout

\begin_layout Itemize
Alice has a key pair 
\begin_inset Formula $(x_{A},X_{A})$
\end_inset

 and Bob has 
\begin_inset Formula $(x_{B,}X_{B}).$
\end_inset

 However, nothing prevents Bob from claiming that his public key is 
\begin_inset Formula $X_{B}'=X_{B}-X_{A}.$
\end_inset

 
\end_layout

\begin_layout Itemize
If he does so, others will assume that 
\begin_inset Formula $X_{A}+X_{B}'$
\end_inset

is the aggregated key that Alice and Bob need to cooperate in order to sign
 for 
\end_layout

\begin_layout Itemize
Unfortunately, that is equal to 
\begin_inset Formula $X_{B}$
\end_inset

, thus Bob can clearly sign for this by himself 
\end_layout

\begin_layout Itemize
This is called a rogue-key attack 
\end_layout

\begin_layout Itemize
One way to avoid this is requiring that Alice and Bob prove first that they
 actually possess the private keys corresponding to their claimed public
 keys; however this is not always possible
\end_layout

\begin_layout Itemize
Ideally a scheme needs to be constructed whose security does not rely on
 out-of-band verification of the keys.
 
\end_layout

\begin_layout Section
Bellare and Neven 
\end_layout

\begin_layout Standard
Bellare-Neven (BN) is a more widely known plain public-key multi-signature
 scheme, that does not support key aggregation.
 It is possible to use BN multi-signatures where the individual keys are
 MuSig aggregates.
 BN multi-signature scheme is secure without such assumptions.
 Below are details:
\end_layout

\begin_layout Itemize
Call 
\begin_inset Formula $L=H(X_{1,}X_{2...})$
\end_inset


\end_layout

\begin_layout Itemize
Each signer chooses a random nonce 
\begin_inset Formula $r_{i}$
\end_inset

 and shares 
\begin_inset Formula $R$
\end_inset


\begin_inset Formula $_{i}=r_{i}G$
\end_inset

 with the other signers
\end_layout

\begin_layout Itemize
Call R the sum of the 
\begin_inset Formula $R_{i}$
\end_inset

 points 
\end_layout

\begin_layout Itemize
Each signer computes 
\begin_inset Formula $s_{i}=r_{i}+H(L,X_{i,}R,m)x_{i}$
\end_inset


\end_layout

\begin_layout Itemize
The final signature is 
\begin_inset Formula $(R,s)$
\end_inset

 where 
\begin_inset Formula $s$
\end_inset

is the sum of the 
\begin_inset Formula $s_{i}$
\end_inset

 values 
\end_layout

\begin_layout Itemize
Verification requires 
\begin_inset Formula $sG=R+H(L,X_{1,}R,m)X_{2}+...$
\end_inset


\end_layout

\begin_layout Standard
Technically, BN has a pre-commit round, where the signers initially reveal
 
\begin_inset Formula $H(R_{i})$
\end_inset

to each other, prior to revealing the 
\begin_inset Formula $R_{i}$
\end_inset

 points themselves.
 This step is a requirement in order to prove security under the DL assumption,
 but it can be dismisses if instead the OMDL assumption is accepted.
 
\end_layout

\begin_layout Standard
Furthermore, when an IAS is desired (where each signer has their own message),
 
\begin_inset Formula $L=H((X_{1},m_{1)},(X_{2},m_{2}),...)$
\end_inset

 and 
\begin_inset Formula $s_{i}=r_{i}+H(L,R,i)x_{i}$
\end_inset

 is used for signing (and analogous for verification).
 
\end_layout

\begin_layout Standard
The resulting signature does not satisfy the normal Schnorr equation anymore,
 nor any other equation that can be written as a function of a combination
 of the public keys; the key aggregation property is lost in order to gain
 security in the plain public-key model.
 
\end_layout

\begin_layout Standard
This is where MuSig comes in.
 It recovers the 
\emph on
key aggregation property without losing security:
\end_layout

\begin_layout Itemize
Call 
\begin_inset Formula $L=H(X_{1},X_{2}...)$
\end_inset


\end_layout

\begin_layout Itemize
Call 
\begin_inset Formula $X$
\end_inset

 the sum of all 
\begin_inset Formula $H(L,X_{i})X_{i}$
\end_inset


\end_layout

\begin_layout Itemize
Each signer chooses a random nonce 
\begin_inset Formula $r_{i},$
\end_inset

 and shares 
\begin_inset Formula $R$
\end_inset


\begin_inset Formula $_{i}=r_{i}G$
\end_inset

 with the other signers 
\end_layout

\begin_layout Itemize
Call 
\begin_inset Formula $R$
\end_inset

 the sum of the 
\begin_inset Formula $R$
\end_inset


\begin_inset Formula $_{i}$
\end_inset

 points 
\end_layout

\begin_layout Itemize
Each signer computes 
\begin_inset Formula $s_{i}=r_{i}+H(X,R,m)H(L,X_{i})x_{i}$
\end_inset


\end_layout

\begin_layout Itemize
The final signature is 
\begin_inset Formula $(R,s)$
\end_inset

 where 
\begin_inset Formula $s$
\end_inset

is the sum of the 
\begin_inset Formula $s_{i}$
\end_inset

 values 
\end_layout

\begin_layout Itemize
Verification again satisfies 
\begin_inset Formula $sG=R+H(X,R,m)X$
\end_inset


\end_layout

\begin_layout Standard
So what was needed was to define 
\begin_inset Formula $X$
\end_inset

 not as a simple sum of the individual public keys 
\begin_inset Formula $X_{i},$
\end_inset

but as a sum of multiples of those keys, where the multiplication factor
 depends on a hash of all participating keys.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Wuille2018"
literal "false"

\end_inset


\end_layout

\begin_layout Section
Simple Schnorr Multi-Signatures with Applications to Bitcoin 
\end_layout

\begin_layout Standard
The paper describes a new Schnorr-based multi-signature scheme called MuSig,
 which is provably secure in the 
\emph on
plain public-model.
 
\emph default
This means that signers are only required to have a public key, but they
 do not have to prove knowledge of the private key corresponding to their
 public key to some certification authority or to other signers prior to
 engaging the protocol.
 
\end_layout

\begin_layout Standard
This new scheme provides improvements to Bellare and Neven (ACM-CCS 2006)
 and its variants by Bagherzandi 
\emph on
et al.
 
\emph default
(ACM-CCS 2008) and Ma 
\emph on
et al.
 
\emph default
(Des.
 Codes Cryptogr., 2010)
\emph on
 
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
Write Sections on Bagerzandi and Ma
\end_layout

\end_inset


\emph default
in two respects: 
\end_layout

\begin_layout Enumerate
It is simple and efficient, as it has the same key and signature size as
 standard Schnorr signatures; 
\end_layout

\begin_layout Enumerate
It allows 
\emph on
key aggregation
\emph default
, where the joint signature can be verified just as a standard Schnorr signature
 with respect to a single 
\begin_inset Quotes eld
\end_inset

aggregated
\begin_inset Quotes erd
\end_inset

 public key which can be computed from the individual public keys of the
 signers.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Maxwell2018"
literal "false"

\end_inset


\end_layout

\begin_layout Subsection
Multi-signatures 
\end_layout

\begin_layout Standard
Introduced by Itakura and Nakamura 
\begin_inset CommandInset citation
LatexCommand cite
key "Itakura1983"
literal "false"

\end_inset

, multi-signature protocols allow a group of signers (that individually
 possess their own private/public key pair) to produce a single signature
 
\begin_inset Formula $\sigma$
\end_inset

on a message 
\begin_inset Formula $m$
\end_inset

.
 Verification of the given signature 
\begin_inset Formula $\sigma$
\end_inset

can be publicly performed given the message and the set of public keys of
 all signers.
 
\end_layout

\begin_layout Standard
A simple way to change a standard signature scheme into a multi-signature
 scheme is to have each signer produce a stand-alone signature for 
\begin_inset Formula $m$
\end_inset

 with its private key and to then concatenate all individual signatures.
 
\end_layout

\begin_layout Standard
The transformation of a standard signature scheme to a multi-signature scheme
 needs to useful and practical, thus the newly calculated multi-signature
 scheme must produce signatures where the size is independent of the number
 of signers and similar to that of the original signaute scheme.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Maxwell2018"
literal "false"

\end_inset


\end_layout

\begin_layout Subsubsection
Rogue Attacks 
\end_layout

\begin_layout Standard
Rogue attacks are a significant concern when implementing multi-signature
 schemes.
 Here a subset of corrupted singers, manipulate the public keys computed
 as functions of the public keys of honest users, allowing them to easily
 produce forgeries for the set of public keys (despite them not knowing
 the associated secret keys.
 
\end_layout

\begin_layout Standard
Proposals from 
\begin_inset CommandInset citation
LatexCommand cite
key "Li1994"
literal "false"

\end_inset

, 
\begin_inset CommandInset citation
LatexCommand cite
key "Harn1994"
literal "false"

\end_inset

, 
\begin_inset CommandInset citation
LatexCommand cite
key "Horster1995"
literal "false"

\end_inset

, 
\begin_inset CommandInset citation
LatexCommand cite
key "Ohta1991"
literal "false"

\end_inset

, 
\begin_inset CommandInset citation
LatexCommand cite
key "Langford1996"
literal "false"

\end_inset

, 
\begin_inset CommandInset citation
LatexCommand cite
key "Michels1996"
literal "false"

\end_inset

, 
\begin_inset CommandInset citation
LatexCommand cite
key "Ohta1999"
literal "false"

\end_inset

 were thus undone before a formal model was put forward along with a provably
 secure scheme from Micali, Ohta, and Reyzin.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Micali2001"
literal "false"

\end_inset

Unfortunately, despite being provably secure this scheme is costly and an
 impractical interactive key generation protocol.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Maxwell2018"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
A means of generically preventing rogue-key attacks is to make it mandatory
 for users to prove knowledge (or possession 
\begin_inset CommandInset citation
LatexCommand cite
key "Ristenpart2007"
literal "false"

\end_inset

) of the secret key during public key registration with a certification
 authority.
 Certification authority is a setting known as the knowledge of secret key
 (KOSK) assumption.
 The pairing-based multi-signature schemes by Boldyreva 
\begin_inset CommandInset citation
LatexCommand cite
key "Boldyreva2003"
literal "false"

\end_inset

 and Lu 
\emph on
et al
\emph default
.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Lu2006"
literal "false"

\end_inset

 rely on the KOSK assumption in order to maintain security.
 However, this as can be seen from 
\begin_inset CommandInset citation
LatexCommand cite
key "Bellare2006"
literal "false"

\end_inset

and 
\begin_inset CommandInset citation
LatexCommand cite
key "Ristenpart2007"
literal "false"

\end_inset

 this assumption is problematic.
 
\begin_inset Marginal
status collapsed

\begin_layout Plain Layout
Should Bellare and Neven reference be included in this statement
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As it stands, the Bellare and Neven 
\begin_inset CommandInset citation
LatexCommand cite
key "Bellare2006"
literal "false"

\end_inset

 provides the most practical multi-signature scheme, based on the Schnorr
 signature scheme, which is provably secure that does not contain any assumption
 on the key setup.
 Since the only requirement of this scheme is that each potential signer
 has a public key, this setting is referred to as the 
\emph on
plain-key model.
 
\end_layout

\begin_layout Subsubsection
Schnorr Signature Scheme 
\end_layout

\begin_layout Standard
The Schnorr signature scheme uses:
\begin_inset CommandInset citation
LatexCommand cite
key "Schnorr1991"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
A cyclic group 
\begin_inset Formula $G$
\end_inset

 of prime order 
\begin_inset Formula $p$
\end_inset


\end_layout

\begin_layout Itemize
A generator 
\begin_inset Formula $g$
\end_inset

of 
\begin_inset Formula $G$
\end_inset


\end_layout

\begin_layout Itemize
A hash function 
\begin_inset Formula $H$
\end_inset


\end_layout

\begin_layout Itemize
A private/public key pair is a pair 
\begin_inset Formula $(x,X)$
\end_inset


\begin_inset Formula $\epsilon\{0,...,p-1\}$
\end_inset


\begin_inset Formula $\mathsf{x}$
\end_inset


\begin_inset Formula $G$
\end_inset

 where 
\begin_inset Formula $X=g^{x}$
\end_inset


\end_layout

\begin_layout Itemize
To sign a message 
\begin_inset Formula $m$
\end_inset

, the signer draws a random integer 
\begin_inset Formula $r$
\end_inset

in 
\begin_inset Formula $Z_{p},$
\end_inset

 computes 
\begin_inset Formula $R=g^{r}$
\end_inset

, 
\begin_inset Formula $c=H(X,R,m)$
\end_inset

, and 
\begin_inset Formula $s=r+cx$
\end_inset


\end_layout

\begin_layout Itemize
The signature is the pair 
\begin_inset Formula $(R,s)$
\end_inset

 , and its validity can be checked by verifying whether 
\begin_inset Formula $g^{s}=RX^{c}$
\end_inset


\end_layout

\begin_layout Standard
The above described is referred to as the so-called 
\begin_inset Quotes eld
\end_inset

key-prefixed
\begin_inset Quotes erd
\end_inset

 variant of the scheme, which sees the public key hashed together with 
\begin_inset Formula $R$
\end_inset

 and 
\begin_inset Formula $m$
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Bernstein2012"
literal "false"

\end_inset

.
 This variant was thought to have a better multi-user security bound than
 the classic variant 
\begin_inset CommandInset citation
LatexCommand cite
key "Bernstein2015"
literal "false"

\end_inset

, however in 
\begin_inset CommandInset citation
LatexCommand cite
key "Kiltz2016"
literal "false"

\end_inset

 the key-prefixing was seen as unnecessary to enable good multi-user security
 for Schnorr signatures.
 
\end_layout

\begin_layout Standard
For the development of the new Schnorr-based multi-signature scheme 
\begin_inset CommandInset citation
LatexCommand cite
key "Maxwell2018"
literal "false"

\end_inset

, key-prefixing seemed a requirement for the security proof to go through,
 despite not knowing the form of an attack.
 The rationale also follows the process in reality, as messages signed in
 Bitcoin always indirectly commits to the public key.
 
\end_layout

\begin_layout Subsubsection
Design of a Schnorr multi-signature scheme
\end_layout

\begin_layout Standard
The naive way to design a Schnorr multi-signature scheme would be as follows:
\end_layout

\begin_layout Itemize
A group of 
\begin_inset Formula $n$
\end_inset

signers want to cosign a message 
\begin_inset Formula $m$
\end_inset


\end_layout

\begin_layout Itemize
Let 
\begin_inset Formula $L=\{X_{1}=g^{x_{1}},...,X_{n}=g^{x_{n}}\}$
\end_inset

 be the multi-set
\begin_inset Foot
status open

\begin_layout Plain Layout
No constraints are imposed on the key setup, the adversary thus can choose
 corrupted public keys at random, hence the same public key can appear more
 than once in 
\begin_inset Formula $L$
\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Paragraph*
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "../Documents/The MuSig Schnorr Signature Scheme"
options "IEEEtran"

\end_inset


\end_layout

\end_body
\end_document
